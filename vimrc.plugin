set nocompatible              " be iMproved, required
filetype off                  " required

" Specify a directory for plugins
" - For Neovim: stdpath('data') . '/plugged'
" - Avoid using standard Vim directory names like 'plugin'
call plug#begin('~/.vim/plugged')

Plug 'tpope/vim-sensible'

" Plug 'https://github.com/skielbasa/vim-material-monokai'
Plug 'kristijanhusak/vim-hybrid-material'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Vim script for text filtering and alignment
" ---------------------------------------------------
Plug 'godlygeek/tabular'

" My Plugs
Plug 'altercation/vim-colors-solarized'

Plug 'chriskempson/vim-tomorrow-theme'

"Produce increasing/decreasing columns of numbers, dates, or daynames
Plug 'vim-scripts/VisIncr'

Plug 'luochen1990/rainbow'
let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle

" Perform all your vim insert mode completions with Tab
" ---------------------------------------------------
Plug 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "<c-n>"

 " Auto toggle paste mode when paste"
Plug 'ConradIrwin/vim-bracketed-paste'

" YouCompleteMe
" Plug 'Valloric/YouCompleteMe'
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" Syntax checking hacks for vim
" ---------------------------------------------------
Plug 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 1
" let g:syntastic_check_on_wq = 0
" 使用前先安装  pip install --upgrade pyflakes
" let g:syntastic_python_checkers = ['pyflakes']
" let g:syntastic_python_checkers = ['flake8']


" fugitive.vim: a Git wrapper so awesome, it should be illegal
" ---------------------------------------------------
Plug 'tpope/vim-fugitive'

" Fuzzy file, buffer, mru, tag, etc finder.
" ---------------------------------------------------
" ---------------------------------------------------
Plug 'kien/ctrlp.vim'

" lean & mean status/tabline for vim that's light as air
" ---------------------------------------------------
" Plug 'bling/vim-airline'

" Vim Plug that displays tags in a window, ordered by scope
" ---------------------------------------------------
Plug 'majutsushi/tagbar'

" Vim Markdown runtime files
" ---------------------------------------------------
Plug 'tpope/vim-markdown'

" A better JSON for Vim: distinct highlighting of keywords vs values,
" JSON-specific (non-JS) warnings, quote concealing. Pathogen-friendly.
" ---------------------------------------------------
Plug 'elzr/vim-json'


" ---------------------------------------------------
Plug 'easymotion/vim-easymotion'

" A Vim Plug which shows a git diff in the gutter (sign column) and
" stages/reverts hunks.
" ---------------------------------------------------
" Plug 'airblade/vim-gitgutter'
" let g:gitgutter_max_signs = 500

" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plug 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
    \ 'python': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'py': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'grondle': { 'left': '{{', 'right': '}}' }
\ }

" vim-surround: invoke when you select words and press 's'
" surround.vim: quoting/parenthesizing made simple
" ---------------------------------------------------
Plug 'tpope/vim-surround'

xmap s <Plug>VSurround


" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plug 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'

" aperezdc/vim-template
" ---------------------------------------------------
Plug 'aperezdc/vim-template'
let g:license = "ZMENG"
let g:email = "wangdongyuan@zmeng123.com"
let g:username = "daniel"


Plug 'Yggdroot/indentLine'


Plug 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>


" Vim Plug, provides insert mode auto-completion for quotes, parens,
" brackets, etc.
Plug 'Raimondi/delimitMate'

" Initialize plugin system
call plug#end()
