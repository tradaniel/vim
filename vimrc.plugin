set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

 " Using the jedi autocompletion library for VIM.
" ---------------------------------------------------
Plugin 'davidhalter/jedi-vim'


" Next generation completion framework after neocomplcache
Plugin 'Shougo/neocomplete.vim'
set nocompatible

let $ONEDRIVE_HOME = expand('C:/OD/Users/Pedro/')
let $DOTVIM = expand('$ONEDRIVE_HOME/vimfiles')

set runtimepath+=$DOTVIM/bundle/neocomplete
set runtimepath+=$DOTVIM/bundle/jedi

filetype plugin indent on

let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_auto_select = 1
if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
endif
let g:neocomplete#force_omni_input_patterns.python =
    \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'

augroup py_comp
    au!
    au FileType python setlocal omnifunc=jedi#completions
augroup END

let g:jedi#popup_select_first = 0
let g:neocomplete#enable_auto_select = 0
let g:jedi#completions_enabled = 0
let g:jedi#auto_vim_configuration = 0
if has('python3')
    let g:jedi#force_py_version = 3
endif



" "Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" " Disable AutoComplPop.
" let g:acp_enableAtStartup = 0
" " Use neocomplete.
" let g:neocomplete#enable_at_startup = 1
" " Use smartcase.
" let g:neocomplete#enable_smart_case = 1
" " Set minimum syntax keyword length.
" let g:neocomplete#sources#syntax#min_keyword_length = 3
" let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" " Define dictionary.
" let g:neocomplete#sources#dictionary#dictionaries = {
    " \ 'default' : '',
    " \ 'vimshell' : $HOME.'/.vimshell_hist',
    " \ 'scheme' : $HOME.'/.gosh_completions'
        " \ }

" " Define keyword.
" if !exists('g:neocomplete#keyword_patterns')
    " let g:neocomplete#keyword_patterns = {}
" endif
" let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" " Plugin key-mappings.
" inoremap <expr><C-g>     neocomplete#undo_completion()
" inoremap <expr><C-l>     neocomplete#complete_common_string()

" " Recommended key-mappings.
" " <CR>: close popup and save indent.
" inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
" function! s:my_cr_function()
  " return (pumvisible() ? "\<C-y>" : "" ) . "\<CR>"
  " " For no inserting <CR> key.
  " "return pumvisible() ? "\<C-y>" : "\<CR>"
" endfunction
" " <TAB>: completion.
" inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" " <C-h>, <BS>: close popup and delete backword char.
" inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
" inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" " Close popup by <Space>.
" "inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"

" " AutoComplPop like behavior.
" "let g:neocomplete#enable_auto_select = 1

" " Shell like behavior(not recommended).
" "set completeopt+=longest
" "let g:neocomplete#enable_auto_select = 1
" "let g:neocomplete#disable_auto_complete = 1
" "inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" " Enable omni completion.
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
" autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
" autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
" autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" " Enable heavy omni completion.
" if !exists('g:neocomplete#sources#omni#input_patterns')
  " let g:neocomplete#sources#omni#input_patterns = {}
" endif
" "let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
" "let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
" "let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" " For perlomni.vim setting.
" " https://github.com/c9s/perlomni.vim
" let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" " Author: wangdongyuan
" " For pythonomni.vim setting.
" " https://github.com/davidhalter/jedi-vim
" autocmd FileType python setlocal omnifunc=jedi#completions
	" let g:jedi#completions_enabled = 0
	" let g:jedi#auto_vim_configuration = 0
	" let g:jedi#smart_auto_mappings = 0
	" let g:neocomplete#force_omni_input_patterns.python =
	" \ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
	" " alternative pattern: '\h\w*\|[^. \t]\.\w*'


" Vim script for text filtering and alignment
" ---------------------------------------------------
Plugin 'godlygeek/tabular'

" My Plugins
Plugin 'altercation/vim-colors-solarized'

" Perform all your vim insert mode completions with Tab
" ---------------------------------------------------
Plugin 'ervandew/supertab'
let g:SuperTabDefaultCompletionType = "<c-n>"


" YouCompleteMe
" Plugin 'Valloric/YouCompleteMe'
" let g:ycm_global_ycm_extra_conf = '~/.vim/bundle/YouCompleteMe/third_party/ycmd/cpp/ycm/.ycm_extra_conf.py'

" Syntax checking hacks for vim
" ---------------------------------------------------
Plugin 'scrooloose/syntastic'
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0
" 使用前先安装  pip install --upgrade pyflakes
" let g:syntastic_python_checkers = ['pyflakes']
let g:syntastic_python_checkers = ['flake8']


" fugitive.vim: a Git wrapper so awesome, it should be illegal
" ---------------------------------------------------
Plugin 'tpope/vim-fugitive'

" Fuzzy file, buffer, mru, tag, etc finder.
" ---------------------------------------------------
" ---------------------------------------------------
Plugin 'kien/ctrlp.vim'

" lean & mean status/tabline for vim that's light as air
" ---------------------------------------------------
" Plugin 'bling/vim-airline'

" Vim plugin that displays tags in a window, ordered by scope
" ---------------------------------------------------
Plugin 'majutsushi/tagbar'

" Vim Markdown runtime files
" ---------------------------------------------------
Plugin 'tpope/vim-markdown'

" A better JSON for Vim: distinct highlighting of keywords vs values,
" JSON-specific (non-JS) warnings, quote concealing. Pathogen-friendly.
" ---------------------------------------------------
Plugin 'elzr/vim-json'


" ---------------------------------------------------
Plugin 'easymotion/vim-easymotion'

" A Vim plugin which shows a git diff in the gutter (sign column) and
" stages/reverts hunks.
" ---------------------------------------------------
" Plugin 'airblade/vim-gitgutter'
" let g:gitgutter_max_signs = 500


Bundle 'Xuyuanp/nerdtree-git-plugin'
let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "✹",
    \ "Staged"    : "✚",
    \ "Untracked" : "✭",
    \ "Renamed"   : "➜",
    \ "Unmerged"  : "═",
    \ "Deleted"   : "✖",
    \ "Dirty"     : "✗",
    \ "Clean"     : "✔︎",
    \ "Unknown"   : "?"
    \ }


" nerdcommenter: invoke by <leader>c<space>, <leader>cl, <leader>cu, <F11> or <C-F11>
" ---------------------------------------------------
Plugin 'scrooloose/nerdcommenter'

let g:NERDSpaceDelims = 1
let g:NERDRemoveExtraSpaces = 1
let g:NERDCustomDelimiters = {
    \ 'python': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'py': { 'left': '#', 'leftAlt': 'FOO', 'rightAlt': 'BAR' },
    \ 'grondle': { 'left': '{{', 'right': '}}' }
\ }

" vim-surround: invoke when you select words and press 's'
" surround.vim: quoting/parenthesizing made simple
" ---------------------------------------------------
Plugin 'tpope/vim-surround'

xmap s <Plug>VSurround


" nerdtree: invoke by :NERDTreeToggle
" ---------------------------------------------------
Plugin 'scrooloose/nerdtree'

let g:NERDTreeWinSize = 30
let g:NERDTreeMouseMode = 1
let g:NERDTreeMapToggleZoom = '<Space>'

" aperezdc/vim-template
" ---------------------------------------------------
Bundle 'aperezdc/vim-template'
let g:license = "ZMENG"
let g:email = "wangdongyuan@zmeng123.com"
let g:username = "daniel"


Bundle 'Yggdroot/indentLine'


Plugin 'ntpeters/vim-better-whitespace'
nnoremap <unique> <leader>w :StripWhitespace<CR>


" Vim plugin, provides insert mode auto-completion for quotes, parens,
" brackets, etc.
Plugin 'Raimondi/delimitMate'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
